version: "3.9"

x-shared-env: &shared-api-worker-env
  # referencia o arquivo .env que ficará no mesmo diretório
  <<: [ *env_file ]

services:
  # ---------------------------
  # Núcleo
  # ---------------------------
  api:
    image: langgenius/dify-api:1.2.0
    restart: always
    env_file: .env
    environment:
      <<: *shared-api-worker-env
      MODE: api
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./volumes/app/storage:/app/api/storage
    networks:
      - ssrf_proxy_network
      - default

  worker:
    image: langgenius/dify-api:1.2.0
    restart: always
    env_file: .env
    environment:
      <<: *shared-api-worker-env
      MODE: worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./volumes/app/storage:/app/api/storage
    networks:
      - ssrf_proxy_network
      - default

  web:
    image: langgenius/dify-web:1.2.0
    restart: always
    env_file: .env
    environment:
      NEXT_TELEMETRY_DISABLED: "1"
    depends_on:
      - api

  # ---------------------------
  # Infra básica
  # ---------------------------
  db:
    image: postgres:15-alpine
    restart: always
    env_file: .env
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "db", "-U", "${PGUSER}", "-d", "${POSTGRES_DB}"]
      interval: 1s
      timeout: 3s
      retries: 60
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data

  redis:
    image: redis:6-alpine
    restart: always
    env_file: .env
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    volumes:
      - ./volumes/redis/data:/data

  sandbox:
    image: langgenius/dify-sandbox:0.2.11
    restart: always
    env_file: .env
    volumes:
      - ./volumes/sandbox/dependencies:/dependencies
      - ./volumes/sandbox/conf:/conf
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SANDBOX_PORT}/health"]
    networks:
      - ssrf_proxy_network

  # ssrf proxy interno
  ssrf_proxy:
    image: ubuntu/squid:latest
    restart: always
    env_file: .env
    volumes:
      - ./ssrf_proxy/squid.conf.template:/etc/squid/squid.conf.template
      - ./ssrf_proxy/docker-entrypoint.sh:/docker-entrypoint-mount.sh
    entrypoint: ["sh", "-c", "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh"]
    networks:
      - ssrf_proxy_network
      - default

  nginx:
    image: nginx:latest
    restart: always
    env_file: .env
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/proxy.conf.template:/etc/nginx/proxy.conf.template
      - ./nginx/https.conf.template:/etc/nginx/https.conf.template
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint-mount.sh
      - ./nginx/ssl:/etc/ssl
    entrypoint: ["sh", "-c", "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh"]
    depends_on:
      - api
      - web

  # ---------------------------
  # Vector store (Weaviate)
  # ---------------------------
  weaviate:
    image: semitechnologies/weaviate:1.19.0
    restart: always
    profiles: ["weaviate", ""]
    env_file: .env
    volumes:
      - ./volumes/weaviate:/var/lib/weaviate

  # ---------------------------
  # (Opcional) Plugin Daemon – se quiser marketplace
  # habilite profile plugin no .env  COMPOSE_PROFILES=weaviate,plugin
  # ---------------------------
  plugin_daemon:
    image: langgenius/dify-plugin-daemon:0.0.7-local
    restart: always
    profiles: ["plugin"]
    env_file: .env
    environment:
      DB_DATABASE: ${DB_PLUGIN_DATABASE}
    volumes:
      - ./volumes/plugin_daemon:/app/storage
    depends_on:
      db:
        condition: service_healthy

# --------------------------------------------------
networks:
  ssrf_proxy_network:
    driver: bridge
    internal: true

volumes:
  # volumes são criados automaticamente pelo EasyPanel
  
